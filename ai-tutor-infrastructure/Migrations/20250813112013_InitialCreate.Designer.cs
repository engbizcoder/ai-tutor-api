// <auto-generated />
using System;
using Ai.Tutor.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ai.Tutor.Infrastructure.Migrations
{
    [DbContext(typeof(AiTutorDbContext))]
    [Migration("20250813112013_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "folder_status_enum", new[] { "active", "archived", "deleted" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "folder_type_enum", new[] { "project", "folder" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "org_role_enum", new[] { "owner", "admin", "member" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "org_type_enum", new[] { "personal", "education", "household", "business" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ai.Tutor.Domain.Entities.Folder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("MetadataJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<Guid>("OrgId")
                        .HasColumnType("uuid")
                        .HasColumnName("org_id");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_user_id");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<decimal>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)")
                        .HasDefaultValue(1000m)
                        .HasColumnName("sort_order");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_folders");

                    b.HasIndex("ParentId");

                    b.HasIndex("OrgId", "OwnerUserId", "ParentId")
                        .HasDatabaseName("ix_folders_org_owner_parent");

                    b.HasIndex("OwnerUserId", "ParentId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ux_folders_owner_parent_name");

                    b.ToTable("folders", (string)null);
                });

            modelBuilder.Entity("Ai.Tutor.Domain.Entities.Org", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("MetadataJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("slug");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_orgs");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("ux_orgs_slug");

                    b.ToTable("orgs", (string)null);
                });

            modelBuilder.Entity("Ai.Tutor.Domain.Entities.OrgMember", b =>
                {
                    b.Property<Guid>("OrgId")
                        .HasColumnType("uuid")
                        .HasColumnName("org_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("joined_at");

                    b.Property<Guid?>("OrgId1")
                        .HasColumnType("uuid");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.HasKey("OrgId", "UserId")
                        .HasName("pk_org_members");

                    b.HasIndex("OrgId1");

                    b.HasIndex("UserId");

                    b.ToTable("org_members", (string)null);
                });

            modelBuilder.Entity("Ai.Tutor.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)")
                        .HasColumnName("email");

                    b.Property<string>("MetadataJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<Guid>("PrimaryOrgId")
                        .HasColumnType("uuid")
                        .HasColumnName("primary_org_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ux_users_email");

                    b.HasIndex("PrimaryOrgId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Ai.Tutor.Domain.Entities.Folder", b =>
                {
                    b.HasOne("Ai.Tutor.Domain.Entities.Org", null)
                        .WithMany()
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_folders_orgs");

                    b.HasOne("Ai.Tutor.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_folders_users_owner");

                    b.HasOne("Ai.Tutor.Domain.Entities.Folder", null)
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_folders_parent");
                });

            modelBuilder.Entity("Ai.Tutor.Domain.Entities.OrgMember", b =>
                {
                    b.HasOne("Ai.Tutor.Domain.Entities.Org", null)
                        .WithMany()
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_org_members_orgs");

                    b.HasOne("Ai.Tutor.Domain.Entities.Org", null)
                        .WithMany("Members")
                        .HasForeignKey("OrgId1");

                    b.HasOne("Ai.Tutor.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_org_members_users");
                });

            modelBuilder.Entity("Ai.Tutor.Domain.Entities.User", b =>
                {
                    b.HasOne("Ai.Tutor.Domain.Entities.Org", null)
                        .WithMany()
                        .HasForeignKey("PrimaryOrgId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_users_primary_org");
                });

            modelBuilder.Entity("Ai.Tutor.Domain.Entities.Org", b =>
                {
                    b.Navigation("Members");
                });
#pragma warning restore 612, 618
        }
    }
}
