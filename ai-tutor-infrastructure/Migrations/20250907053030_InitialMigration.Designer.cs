// <auto-generated />
using System;
using Ai.Tutor.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ai.Tutor.Infrastructure.Migrations
{
    [DbContext(typeof(AiTutorDbContext))]
    [Migration("20250907053030_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "attachment_type_enum", new[] { "document", "image", "other" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "folder_status_enum", new[] { "active", "archived", "deleted" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "folder_type_enum", new[] { "project", "folder" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "message_status_enum", new[] { "sending", "sent", "error" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "org_lifecycle_status_enum", new[] { "active", "disabled", "deleted", "purged" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "org_role_enum", new[] { "owner", "admin", "member" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "org_type_enum", new[] { "personal", "education", "household", "business" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "reference_type_enum", new[] { "file", "page", "video", "link", "formula" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "sender_type_enum", new[] { "user", "ai" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "thread_status_enum", new[] { "active", "archived", "deleted" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ai.Tutor.Infrastructure.Data.Models.AttachmentRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid")
                        .HasColumnName("file_id");

                    b.Property<Guid?>("FileId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.Property<Guid?>("MessageId1")
                        .HasColumnType("uuid");

                    b.Property<string>("MetadataJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_attachments");

                    b.HasIndex("FileId");

                    b.HasIndex("FileId1");

                    b.HasIndex("MessageId")
                        .HasDatabaseName("ix_attachments_message");

                    b.HasIndex("MessageId1");

                    b.ToTable("attachments", (string)null);
                });

            modelBuilder.Entity("Ai.Tutor.Infrastructure.Data.Models.FileRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ChecksumSha256")
                        .HasColumnType("text")
                        .HasColumnName("checksum_sha256");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<string>("MetadataJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<Guid>("OrgId")
                        .HasColumnType("uuid")
                        .HasColumnName("org_id");

                    b.Property<Guid?>("OrgId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_user_id");

                    b.Property<Guid?>("OwnerUserId1")
                        .HasColumnType("uuid");

                    b.Property<int?>("Pages")
                        .HasColumnType("integer")
                        .HasColumnName("pages");

                    b.Property<long>("SizeBytes")
                        .HasColumnType("bigint")
                        .HasColumnName("size_bytes");

                    b.Property<string>("StorageKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("storage_key");

                    b.Property<string>("StorageUrl")
                        .HasColumnType("text")
                        .HasColumnName("storage_url");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_files");

                    b.HasIndex("ChecksumSha256")
                        .HasDatabaseName("ix_files_checksum");

                    b.HasIndex("OrgId1");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("OwnerUserId1");

                    b.HasIndex("OrgId", "OwnerUserId")
                        .HasDatabaseName("ix_files_org_owner");

                    b.ToTable("files", (string)null);
                });

            modelBuilder.Entity("Ai.Tutor.Infrastructure.Data.Models.FolderRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("MetadataJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<Guid>("OrgId")
                        .HasColumnType("uuid")
                        .HasColumnName("org_id");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_user_id");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<decimal>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(12, 6)
                        .HasColumnType("numeric(12,6)")
                        .HasDefaultValue(1000m)
                        .HasColumnName("sort_order");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_folders");

                    b.HasIndex("ParentId");

                    b.HasIndex("OrgId", "OwnerUserId", "ParentId")
                        .HasDatabaseName("ix_folders_org_owner_parent");

                    b.HasIndex("OwnerUserId", "ParentId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ux_folders_owner_parent_name");

                    b.ToTable("folders", (string)null);
                });

            modelBuilder.Entity("Ai.Tutor.Infrastructure.Data.Models.MessageRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("IdempotencyKey")
                        .HasColumnType("text");

                    b.Property<string>("MetadataJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<Guid?>("SenderId")
                        .HasColumnType("uuid")
                        .HasColumnName("sender_id");

                    b.Property<string>("SenderType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sender_type");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid>("ThreadId")
                        .HasColumnType("uuid")
                        .HasColumnName("thread_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_chat_messages");

                    b.HasIndex("ThreadId", "CreatedAt", "Id")
                        .HasDatabaseName("ix_messages_thread_created_id");

                    b.ToTable("chat_messages", (string)null);
                });

            modelBuilder.Entity("Ai.Tutor.Infrastructure.Data.Models.OrgMemberRecord", b =>
                {
                    b.Property<Guid>("OrgId")
                        .HasColumnType("uuid")
                        .HasColumnName("org_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("joined_at");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.HasKey("OrgId", "UserId")
                        .HasName("pk_org_members");

                    b.HasIndex("UserId");

                    b.ToTable("org_members", (string)null);
                });

            modelBuilder.Entity("Ai.Tutor.Infrastructure.Data.Models.OrgRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LifecycleStatus")
                        .HasColumnType("integer");

                    b.Property<string>("MetadataJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("PurgeScheduledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RetentionDays")
                        .HasColumnType("integer");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("slug");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_orgs");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("ux_orgs_slug");

                    b.ToTable("orgs", (string)null);
                });

            modelBuilder.Entity("Ai.Tutor.Infrastructure.Data.Models.ReferenceRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid")
                        .HasColumnName("file_id");

                    b.Property<Guid?>("FileId1")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.Property<Guid?>("MessageId1")
                        .HasColumnType("uuid");

                    b.Property<string>("MetadataJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<int?>("PageNumber")
                        .HasColumnType("integer")
                        .HasColumnName("page_number");

                    b.Property<string>("PreviewImgUrl")
                        .HasColumnType("text")
                        .HasColumnName("preview_img_url");

                    b.Property<Guid>("ThreadId")
                        .HasColumnType("uuid")
                        .HasColumnName("thread_id");

                    b.Property<Guid?>("ThreadId1")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_document_references");

                    b.HasIndex("FileId")
                        .HasDatabaseName("ix_document_references_file_id");

                    b.HasIndex("FileId1");

                    b.HasIndex("MessageId")
                        .HasDatabaseName("ix_document_references_message");

                    b.HasIndex("MessageId1");

                    b.HasIndex("ThreadId1");

                    b.HasIndex("ThreadId", "CreatedAt", "Id")
                        .HasDatabaseName("ix_document_references_thread_created_id");

                    b.ToTable("document_references", null, t =>
                        {
                            t.HasCheckConstraint("ck_document_references_url_or_file", "(url IS NOT NULL) OR (file_id IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("Ai.Tutor.Infrastructure.Data.Models.ThreadRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("FolderId")
                        .HasColumnType("uuid")
                        .HasColumnName("folder_id");

                    b.Property<string>("MetadataJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<Guid>("OrgId")
                        .HasColumnType("uuid")
                        .HasColumnName("org_id");

                    b.Property<decimal>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,6)")
                        .HasDefaultValue(1000m)
                        .HasColumnName("sort_order");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_chat_threads");

                    b.HasIndex("FolderId");

                    b.HasIndex("UserId", "SortOrder", "Id")
                        .HasDatabaseName("ix_threads_user_sort_id");

                    b.HasIndex("OrgId", "FolderId", "SortOrder", "Id")
                        .HasDatabaseName("ix_threads_org_folder_sort_id");

                    b.ToTable("chat_threads", (string)null);
                });

            modelBuilder.Entity("Ai.Tutor.Infrastructure.Data.Models.UserRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)")
                        .HasColumnName("email");

                    b.Property<string>("MetadataJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<Guid>("PrimaryOrgId")
                        .HasColumnType("uuid")
                        .HasColumnName("primary_org_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ux_users_email");

                    b.HasIndex("PrimaryOrgId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Ai.Tutor.Infrastructure.Data.Models.AttachmentRecord", b =>
                {
                    b.HasOne("Ai.Tutor.Infrastructure.Data.Models.FileRecord", null)
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_attachments_file");

                    b.HasOne("Ai.Tutor.Infrastructure.Data.Models.FileRecord", "File")
                        .WithMany()
                        .HasForeignKey("FileId1");

                    b.HasOne("Ai.Tutor.Infrastructure.Data.Models.MessageRecord", null)
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_attachments_message");

                    b.HasOne("Ai.Tutor.Infrastructure.Data.Models.MessageRecord", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId1");

                    b.Navigation("File");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Ai.Tutor.Infrastructure.Data.Models.FileRecord", b =>
                {
                    b.HasOne("Ai.Tutor.Infrastructure.Data.Models.OrgRecord", null)
                        .WithMany()
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_files_org");

                    b.HasOne("Ai.Tutor.Infrastructure.Data.Models.OrgRecord", "Org")
                        .WithMany()
                        .HasForeignKey("OrgId1");

                    b.HasOne("Ai.Tutor.Infrastructure.Data.Models.UserRecord", null)
                        .WithMany()
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_files_owner");

                    b.HasOne("Ai.Tutor.Infrastructure.Data.Models.UserRecord", "OwnerUser")
                        .WithMany()
                        .HasForeignKey("OwnerUserId1");

                    b.Navigation("Org");

                    b.Navigation("OwnerUser");
                });

            modelBuilder.Entity("Ai.Tutor.Infrastructure.Data.Models.FolderRecord", b =>
                {
                    b.HasOne("Ai.Tutor.Infrastructure.Data.Models.OrgRecord", null)
                        .WithMany()
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_folders_orgs");

                    b.HasOne("Ai.Tutor.Infrastructure.Data.Models.UserRecord", null)
                        .WithMany()
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_folders_users_owner");

                    b.HasOne("Ai.Tutor.Infrastructure.Data.Models.FolderRecord", null)
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_folders_parent");
                });

            modelBuilder.Entity("Ai.Tutor.Infrastructure.Data.Models.MessageRecord", b =>
                {
                    b.HasOne("Ai.Tutor.Infrastructure.Data.Models.ThreadRecord", "Thread")
                        .WithMany("Messages")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_messages_thread");

                    b.Navigation("Thread");
                });

            modelBuilder.Entity("Ai.Tutor.Infrastructure.Data.Models.OrgMemberRecord", b =>
                {
                    b.HasOne("Ai.Tutor.Infrastructure.Data.Models.OrgRecord", null)
                        .WithMany()
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_org_members_orgs");

                    b.HasOne("Ai.Tutor.Infrastructure.Data.Models.UserRecord", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_org_members_users");
                });

            modelBuilder.Entity("Ai.Tutor.Infrastructure.Data.Models.ReferenceRecord", b =>
                {
                    b.HasOne("Ai.Tutor.Infrastructure.Data.Models.FileRecord", null)
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_document_references_file");

                    b.HasOne("Ai.Tutor.Infrastructure.Data.Models.FileRecord", "File")
                        .WithMany()
                        .HasForeignKey("FileId1");

                    b.HasOne("Ai.Tutor.Infrastructure.Data.Models.MessageRecord", null)
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_document_references_message");

                    b.HasOne("Ai.Tutor.Infrastructure.Data.Models.MessageRecord", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId1");

                    b.HasOne("Ai.Tutor.Infrastructure.Data.Models.ThreadRecord", null)
                        .WithMany()
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_document_references_thread");

                    b.HasOne("Ai.Tutor.Infrastructure.Data.Models.ThreadRecord", "Thread")
                        .WithMany()
                        .HasForeignKey("ThreadId1");

                    b.Navigation("File");

                    b.Navigation("Message");

                    b.Navigation("Thread");
                });

            modelBuilder.Entity("Ai.Tutor.Infrastructure.Data.Models.ThreadRecord", b =>
                {
                    b.HasOne("Ai.Tutor.Infrastructure.Data.Models.FolderRecord", null)
                        .WithMany()
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_threads_folder");

                    b.HasOne("Ai.Tutor.Infrastructure.Data.Models.OrgRecord", null)
                        .WithMany()
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_threads_org");

                    b.HasOne("Ai.Tutor.Infrastructure.Data.Models.UserRecord", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_threads_user");
                });

            modelBuilder.Entity("Ai.Tutor.Infrastructure.Data.Models.UserRecord", b =>
                {
                    b.HasOne("Ai.Tutor.Infrastructure.Data.Models.OrgRecord", null)
                        .WithMany()
                        .HasForeignKey("PrimaryOrgId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_users_primary_org");
                });

            modelBuilder.Entity("Ai.Tutor.Infrastructure.Data.Models.ThreadRecord", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
