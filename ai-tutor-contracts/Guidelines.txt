AI Tutor â€“ Implementation Guidelines

Purpose
- Central place to capture repetitive engineering rules and conventions for this solution.
- Lives next to NextSteps.txt for quick reference and updates.

Core Rules
- Do NOT access repository classes directly from API controllers.
  - Controllers in `ai-tutor-api/Controllers/` should send commands/queries via the mediator abstractions in `ai-tutor-services/Mediation/` to feature handlers in `ai-tutor-services/Features/`.
  - Repositories declared in `ai-tutor-domain/Repositories/` with implementations in `ai-tutor-infrastructure/Repositories/` should be used inside services/handlers, not in controllers.

- One type per file (project-wide convention).
  - Do not group multiple enums, records, or interfaces in a single file.
  - Prefer a clear filename that matches the type name.

- Contracts and DTOs
  - Place shared request/response contracts in `ai-tutor-contracts/DTOs/`.
  - Keep API-facing shapes stable; avoid leaking domain or EF types outside contracts.

- Infrastructure boundaries
  - Avoid direct `DbContext` usage outside `ai-tutor-infrastructure/`.
  - Access data via repositories only.

- API hygiene
  - Keep controllers thin: parameter binding, authorization, and delegating to mediator.
  - Use `Middlewares/CorrelationIdMiddleware.cs` to propagate correlation IDs automatically.

How to Add a New Feature (Quick Path)
1) Define request/response DTOs in `ai-tutor-contracts/DTOs/` if needed.
2) Add a mediator request/handler under the relevant feature in `ai-tutor-services/Features/<Area>/`.
3) Inject and use repositories inside the handler (not controllers).
4) Add a controller endpoint in `ai-tutor-api/Controllers/` that sends the mediator request and returns the result/problem details.

Notes
- Update this file as conventions evolve. Keep entries short and action-oriented.


Prefix local calls with this
Documentation text should end with a period
 Code should not contain trailing whitespaces
 Make sure: The parameters should begin on the line after the declaration, whenever the parameter span across multiple lines
 The parameters should begin on the line after the declaration, whenever the parameter span across multiple lines
 avoid : Inconsistent braces style: missing brace (for if or for single line statements)
 do not prefix with this when a dependency is injected in primary constructor and is not assigned to a private field which is then used
 do not use this prefix for private static method calls or other static method calls
- Add the following constructor to MessageNotFoundException: public MessageNotFoundException() .. always  make sure this warning is not there CA1032
- please use fluent validations library for the validations and do not have validations in the handlers unless we want to have specific manual validations, with latest version we can not wire up automatically and have to inject validators 
in controllers and then validate in controllers and throw appropriate problem details. The idea also should be that these errors somehow map to some error codes and we can use them in the UI. The error codes
should be also accompanied by parameters that then can be used to provide translated texts on the UI with interpolation with these additional params that will be dynamic depending upon excecption or problem details context.
The same is also true with exceptions handling and their mapping to problem details.
- Whenever you create new files and there are no build errors, you must run the build and check if there are any warnings or errors in new code and fix them (stylecop issues ) and then write integration tests for the new code and execute them (only when this
new code really requires integration tests, so for example a new controller endpoint and entire flow down to DB or external service call)

-- SA1128: Put constructor initializers on their own line
-- SA1116: The parameters should begin on the line after the declaration, whenever the parameter span across multiple lines
-- SA1516: Elements should be separated by blank line
-- SA1028: Code should not contain trailing whitespaces
-- SA1116: The parameters should begin on the line after the declaration, whenever the parameter span across multiple lines
-- SA1128: Put constructor initializers on their own line
-- SA1028: Code should not contain trailing whitespaces
-- SA1629: Documentation text should end with a period
-- SA1028: Code should not contain trailing whitespaces