namespace Ai.Tutor.Contracts.DTOs;

using System.Text.Json.Serialization;

/// <summary>
/// Represents a standardized error response following the RFC 7807 Problem Details specification.
/// </summary>
public sealed class ApiProblemDetails
{
    /// <summary>
    /// Gets a URI reference that identifies the problem type.
    /// </summary>
    [JsonPropertyName("type")]
    public string? Type { get; init; }

    /// <summary>
    /// Gets a short, human-readable summary of the problem type.
    /// </summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    /// <summary>
    /// Gets the HTTP status code generated by the origin server for this occurrence of the problem.
    /// </summary>
    [JsonPropertyName("status")]
    public int? Status { get; init; }

    /// <summary>
    /// Gets a human-readable explanation specific to this occurrence of the problem.
    /// </summary>
    [JsonPropertyName("detail")]
    public string? Detail { get; init; }

    /// <summary>
    /// Gets a URI reference that identifies the specific occurrence of the problem.
    /// </summary>
    [JsonPropertyName("instance")]
    public string? Instance { get; init; }

    /// <summary>
    /// Gets a stable application-specific error code (e.g., FOLDER_NAME_TAKEN, THREAD_NOT_FOUND).
    /// </summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }

    /// <summary>
    /// Gets the validation errors associated with this instance.
    /// </summary>
    /// <remarks>
    /// This property is typically used for HTTP 400 Bad Request or 422 Unprocessable Entity responses
    /// to provide detailed validation error information.
    /// </remarks>
    [JsonPropertyName("errors")]
    public IDictionary<string, string[]>? Errors { get; init; }

    /// <summary>
    /// Gets indicates whether the client MAY retry the same request.
    /// </summary>
    /// <remarks>
    /// This is typically set to true for 429 Too Many Requests or 5xx server errors
    /// where the request might succeed if retried later.
    /// </remarks>
    [JsonPropertyName("retryable")]
    public bool? Retryable { get; init; }

    /// <summary>
    /// Gets additional metadata about the error that is safe to expose to the client.
    /// </summary>
    [JsonPropertyName("meta")]
    public IDictionary<string, object?>? Meta { get; init; }
}